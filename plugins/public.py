import re
import asyncio
from typing import Optional

from .utils import STS
from database import db
from config import temp, Config
from script import Script
from pyrogram import Client, filters, enums
from pyrogram.errors import FloodWait, MessageNotModified
from pyrogram.errors.exceptions.not_acceptable_406 import ChannelPrivate as PrivateChat
from pyrogram.errors.exceptions.bad_request_400 import (
    ChannelInvalid, UsernameInvalid, UsernameNotModified, ChannelPrivate
)
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup

# ensure conversation state dict exists
temp.FORWARD_CONV = getattr(temp, 'FORWARD_CONV', {})

COMMANDS = ["forward"]


async def msg_edit(msg, text, reply_markup=None, retry=True):
    """s·¥ÄÍú∞·¥á ·¥á·¥Ö…™·¥õ: …™…¢…¥·¥è Ä·¥á '…¥·¥è·¥õ ·¥ç·¥è·¥Ö…™Íú∞…™·¥á·¥Ö' ·¥Ä…¥·¥Ö  ú·¥Ä…¥·¥Ö ü·¥á Íú∞ ü·¥è·¥è·¥Ö·¥°·¥Ä…™·¥õ  ô è s ü·¥á·¥á·¥ò…™…¥…¢.
     Ä·¥á·¥õ·¥ú Ä…¥s ·¥õ ú·¥á ·¥á·¥Ö…™·¥õ·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á ·¥è Ä N·¥è…¥·¥á ·¥è…¥ Íú∞·¥Ä…™ ü·¥ú Ä·¥á.
    """
    try:
        return await msg.edit(text, reply_markup=reply_markup)
    except MessageNotModified:
        return None
    except FloodWait as e:
        if retry:
            await asyncio.sleep(e.value)
            return await msg_edit(msg, text, reply_markup, retry=False)


async def send_confirmation(bot: Client, user_id: int, message):
    """·¥ò Ä·¥á·¥ò·¥Ä Ä·¥á ·¥Ä…¥·¥Ö s·¥á…¥·¥Ö “ì…™…¥·¥Ä ü ·¥Ñ·¥è…¥Íú∞…™ Ä·¥ç·¥Ä·¥õ…™·¥è…¥, s·¥õ·¥è Ä·¥á “ì·¥è Ä·¥°·¥Ä Ä·¥Ö…™…¥…¢ s·¥õ·¥Ä·¥õ·¥á …™…¥ S·¥õs.
    ·¥ò·¥è·¥òs ·¥Ñ·¥è…¥·¥† s·¥õ·¥Ä·¥õ·¥á ·¥° ú·¥á…¥ ·¥Ö·¥è…¥·¥á.
    """
    conv = temp.FORWARD_CONV.pop(user_id, None)
    if not conv:
        return await message.reply_text("s·¥áss…™·¥è…¥ ·¥áx·¥ò…™ Ä·¥á·¥Ö. s·¥õ·¥Ä Ä·¥õ ·¥Ä…¢·¥Ä…™…¥ ·¥°…™·¥õ ú /forward.")

    toid = conv['to_id']
    to_title = conv['to_title']
    client_type = conv['client_type']
    account = conv['bot_account'] if client_type == 'bot' else conv['userbot_account']
    fromid = conv['from_id']
    last_msg_id = conv['last_msg_id']
    skipno = conv.get('skipno', 0)

    # try to get a readable source title
    try:
        title = (await bot.get_chat(fromid)).title
    except (PrivateChat, ChannelPrivate, ChannelInvalid, UsernameInvalid, UsernameNotModified):
        title = "·¥Ä ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä·¥õ"
    except Exception as e:
        await message.reply_text(f"·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ·¥° ú…™ ü·¥á Íú∞·¥á·¥õ·¥Ñ ú…™…¥…¢ ·¥Ñ ú·¥Ä·¥õ ·¥õ…™·¥õ ü·¥á: {e}")
        return

    forward_id = f"{user_id}-{message.id}"
    buttons = [
        [InlineKeyboardButton(' è·¥ás, s·¥õ·¥Ä Ä·¥õ Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö…™…¥…¢',
                              callback_data=f"start_public_{forward_id}")],
        [InlineKeyboardButton('…¥·¥è, ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü', callback_data='close_btn')]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)

    await message.reply_text(
        Script.DOUBLE_CHECK.format(
            botname=account.get('name', 'N/A'),
            botuname=account.get('username', 'N/A'),
            from_chat=title,
            to_chat=to_title,
            skip=skipno
        ),
        disable_web_page_preview=True,
        reply_markup=reply_markup
    )

    # persist the forwarding config in STS
    STS(forward_id).store(fromid, toid, skipno, last_msg_id, client_type, account.get('id'))


async def ask_for_to_channel(bot: Client, user_id: int, chat_id: int, message=None):
    """s ú·¥è·¥° ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ñ ú·¥è…™·¥Ñ·¥ás ·¥è Ä ·¥Ä·¥ú·¥õ·¥è-s·¥á ü·¥á·¥Ñ·¥õ ·¥° ú·¥á…¥ ·¥è…¥ ü è ·¥è…¥·¥á ·¥áx…™s·¥õs."""
    channels = await db.get_user_channels(user_id)
    if not channels:
        await bot.send_message(chat_id, "·¥ò ü·¥á·¥Äs·¥á s·¥á·¥õ ·¥Ä 'To' ·¥Ñ ú·¥Ä…¥…¥·¥á ü …™…¥ /settings  ô·¥áÍú∞·¥è Ä·¥á Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö…™…¥…¢.")
        temp.FORWARD_CONV.pop(user_id, None)
        return

    conv = temp.FORWARD_CONV.setdefault(user_id, {})
    client_type = conv.get('client_type')
    account = conv.get('bot_account') if client_type == 'bot' else conv.get(
        'userbot_account')
    text = Script.TO_MSG.format(account.get(
        'name', 'N/A'), account.get('username', 'N/A'))

    if len(channels) > 1:
        buttons = [[InlineKeyboardButton(
            ch['title'], callback_data=f"fwd:channel:{ch['chat_id']}:{ch['title']}")] for ch in channels]
        buttons.append([InlineKeyboardButton(
            "·¥Ñ·¥Ä…¥·¥Ñ·¥á ü", callback_data="fwd:cancel")])
        markup = InlineKeyboardMarkup(buttons)
        if message:
            await msg_edit(message, text, reply_markup=markup)
        else:
            await bot.send_message(chat_id, text, reply_markup=markup)
        return

    # only one channel -> auto-select
    ch = channels[0]
    conv.update({'to_id': ch['chat_id'],
                'to_title': ch['title'], 'step': 'waiting_from'})
    prompt_message = Script.FROM_MSG
    if message:
        await msg_edit(message, prompt_message)
    else:
        await bot.send_message(chat_id, prompt_message)


def get_task_limit(user_id):
    premium_status = Config.PREMIUM_USERS.get(user_id)
    return Config.TASK_LIMITS.get(premium_status, Config.TASK_LIMITS["default"])


@Client.on_message(filters.private & filters.command(COMMANDS))
async def forward_command(bot: Client, message):
    user_id = message.from_user.id
    task_limit = get_task_limit(user_id)
    active_tasks = len(temp.lock.get(user_id, []))

    if active_tasks >= task_limit:
        return await message.reply_text(
            f" è·¥è·¥ú  ú·¥Ä·¥†·¥á  Ä·¥á·¥Ä·¥Ñ ú·¥á·¥Ö  è·¥è·¥ú Ä ·¥ç·¥Äx…™·¥ç·¥ú·¥ç  ü…™·¥ç…™·¥õ ·¥èÍú∞ {task_limit} ·¥Ñ·¥è…¥·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥õ·¥Äs·¥ãs. ·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ Íú∞·¥è Ä  è·¥è·¥ú Ä ·¥è·¥õ ú·¥á Ä ·¥õ·¥Äs·¥ãs ·¥õ·¥è ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á."
        )

    # reset any previous session
    temp.FORWARD_CONV.pop(user_id, None)

    bots = await db.get_bots(user_id)
    userbots = await db.get_userbots(user_id)
    
    if not bots and not userbots:
        return await message.reply_text("<code> è·¥è·¥ú ·¥Ö…™·¥Ö…¥'·¥õ ·¥Ä·¥Ö·¥Ö ·¥Ä…¥ è  ô·¥è·¥õ. ·¥ò ü·¥á·¥Äs·¥á ·¥Ä·¥Ö·¥Ö ·¥Ä  ô·¥è·¥õ ·¥ús…™…¥…¢ /settings !</code>")

    temp.FORWARD_CONV[user_id] = {}
    
    buttons = []
    for _bot in bots:
        if _bot['id'] not in temp.lock.get(user_id, []):
            buttons.append([InlineKeyboardButton(
                f"ü§ñBOT: {_bot.get('name', 'N/A')}", callback_data=f"fwd:client:bot:{_bot['id']}")])
    for usr_bot in userbots:
        if usr_bot['id'] not in temp.lock.get(user_id, []):
            buttons.append([InlineKeyboardButton(
                f"üë§USERBOT: {usr_bot.get('name', 'N/A')}", callback_data=f"fwd:client:userbot:{usr_bot['id']}")])
    
    if not buttons:
        return await message.reply_text("·¥Ä ü ü  è·¥è·¥ú Ä  ô·¥è·¥õs ·¥Ä Ä·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è  ô·¥ús è. ·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ Íú∞·¥è Ä ·¥Ä ·¥ä·¥è ô ·¥õ·¥è ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á.")

    buttons.append([InlineKeyboardButton("·¥Ñ·¥Ä…¥·¥Ñ·¥á ü", callback_data="fwd:cancel")])
    await message.reply_text(
        " è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥ç·¥ú ü·¥õ…™·¥ò ü·¥á  ô·¥è·¥õs ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á.\n\n·¥° ú…™·¥Ñ ú ·¥è…¥·¥á ·¥°·¥è·¥ú ü·¥Ö  è·¥è·¥ú  ü…™·¥ã·¥á ·¥õ·¥è ·¥ús·¥á “ì·¥è Ä ·¥õ ú…™s “ì·¥è Ä·¥°·¥Ä Ä·¥Ö?",
        reply_markup=InlineKeyboardMarkup(buttons)
    )


@Client.on_callback_query(filters.regex(r"^fwd:"))
async def forward_callback_handler(bot: Client, query):
    user_id = query.from_user.id
    if user_id not in temp.FORWARD_CONV:
        return await query.answer("·¥õ ú…™s …™s ·¥Ä…¥ ·¥è ü·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á. ·¥ò ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ ·¥Ä…¢·¥Ä…™…¥ ·¥°…™·¥õ ú /forward.", show_alert=True)

    # allow title to contain ':' by limiting splits
    parts = query.data.split(':', 4)
    action = parts[1]

    if action == 'cancel':
        temp.FORWARD_CONV.pop(user_id, None)
        await query.answer('·¥è·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥ ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö.')
        await msg_edit(query.message, '·¥è·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥ ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö.')
        return

    if action == 'client':
        client_type = parts[2]
        bot_id = int(parts[3])
        
        if client_type == 'bot':
            account = await db.get_bot(user_id, bot_id)
            temp.FORWARD_CONV[user_id]['bot_account'] = account
        else:
            account = await db.get_userbot(user_id, bot_id)
            temp.FORWARD_CONV[user_id]['userbot_account'] = account
            
        temp.FORWARD_CONV[user_id]['client_type'] = client_type
        await query.answer(f"s·¥á ü·¥á·¥Ñ·¥õ·¥á·¥Ö {account.get('name', 'N/A')}.")
        await ask_for_to_channel(bot, user_id, query.message.chat.id, message=query.message)
        return

    if action == 'channel':
        to_id = int(parts[2])
        to_title = parts[3]
        temp.FORWARD_CONV[user_id].update(
            {'to_id': to_id, 'to_title': to_title, 'step': 'waiting_from'})
        await query.answer(f"·¥Ö·¥ás·¥õ…™…¥·¥Ä·¥õ…™·¥è…¥ s·¥á·¥õ ·¥õ·¥è: {to_title}")
        await msg_edit(query.message, Script.FROM_MSG)
        return

    if action == 'skip':
        choice = parts[2]
        if choice == 'yes':
            temp.FORWARD_CONV[user_id]['step'] = 'waiting_skip'
            await query.answer('·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥õ ú·¥á …¥·¥ú·¥ç ô·¥á Ä ·¥è“ì ·¥ç·¥áss·¥Ä…¢·¥ás ·¥õ·¥è s·¥ã…™·¥ò.')
            await msg_edit(query.message, Script.SKIP_MSG)
        else:
            temp.FORWARD_CONV[user_id]['skipno'] = 0
            await query.answer('·¥°…™ ü ü …¥·¥è·¥õ s·¥ã…™·¥ò ·¥Ä…¥ è ·¥ç·¥áss·¥Ä…¢·¥ás.')
            x = await msg_edit(query.message, '…¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢ Íú∞…™…¥·¥Ä ü ·¥Ñ·¥è…¥Íú∞…™ Ä·¥ç·¥Ä·¥õ…™·¥è…¥...')
            await send_confirmation(bot, user_id, query.message)
            await x.delete()



@Client.on_message(filters.private & filters.text, group=-1)
async def forward_message_handler(bot: Client, message):
    user_id = message.from_user.id
    conv = temp.FORWARD_CONV.get(user_id)
    if not conv or 'step' not in conv:
        return

    step = conv['step']
    try:
        # treat slash commands as cancellation
        if message.text.startswith('/'):
            temp.FORWARD_CONV.pop(user_id, None)
            return await message.reply_text(Script.CANCEL)
    except Exception as e:
        print(e)
        return

    # waiting for the source message (link or forwarded message)
    if step == 'waiting_from':
        # link-based public message
        if message.text and not getattr(message, 'forward_date', None):
            regex = re.compile(
                r"(https://)?(t\.me/|telegram\.me/|telegram\.dog/)(c/)?(\d+|[A-Za-z_0-9]+)/(?P<msg>\d+)$")
            txt = message.text.replace('?single', '')
            m = regex.search(txt)
            if not m:
                x = await message.reply_text('…™…¥·¥†·¥Ä ü…™·¥Ö  ü…™…¥·¥ã. ·¥ò ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥ò·¥ú ô ü…™·¥Ñ ·¥ç·¥áss·¥Ä…¢·¥á  ü…™…¥·¥ã.')
                return

            chat_id = m.group(4)
            last_msg_id = int(m.group('msg'))
            if chat_id.isnumeric():
                chat_id = int(f"-100{chat_id}")

        # forwarded message from a channel/supergroup
        elif getattr(message, 'forward_from_chat', None) and message.forward_from_chat.type in [enums.ChatType.CHANNEL, enums.ChatType.SUPERGROUP]:
            last_msg_id = message.forward_from_message_id
            chat_id = message.forward_from_chat.username or message.forward_from_chat.id
            if last_msg_id is None:
                return await message.reply_text("·¥õ ú…™s  ü·¥è·¥è·¥ãs  ü…™·¥ã·¥á ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á “ì Ä·¥è·¥ç ·¥Ä…¥ ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥. ·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥õ ú·¥á  ü·¥Äs·¥õ ·¥ç·¥áss·¥Ä…¢·¥á  ü…™…¥·¥ã “ì Ä·¥è·¥ç ·¥õ ú·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü …™…¥s·¥õ·¥á·¥Ä·¥Ö.")
        else:
            return await message.reply_text("…™…¥·¥†·¥Ä ü…™·¥Ö …™…¥·¥ò·¥ú·¥õ. ·¥ò ü·¥á·¥Äs·¥á “ì·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥è Ä s·¥á…¥·¥Ö ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á  ü…™…¥·¥ã.")

        conv.update(
            {'from_id': chat_id, 'last_msg_id': last_msg_id, 'step': 'confirm_skip'})
        buttons = [[
            InlineKeyboardButton(' è·¥ás', callback_data='fwd:skip:yes'),
            InlineKeyboardButton('…¥·¥è', callback_data='fwd:skip:no')
        ]]
        await message.reply_text('·¥Ö·¥è  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è s·¥ã…™·¥ò ·¥Ä…¥ è ·¥ç·¥áss·¥Ä…¢·¥ás?', reply_markup=InlineKeyboardMarkup(buttons))
        return

    # waiting for skip number
    if step == 'waiting_skip':
        if not message.text.isdigit():
            x=await message.reply_text('…™…¥·¥†·¥Ä ü…™·¥Ö …¥·¥ú·¥ç ô·¥á Ä. ·¥ò ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥è…¥ ü è ·¥õ ú·¥á …¥·¥ú·¥ç ô·¥á Ä ·¥èÍú∞ ·¥ç·¥áss·¥Ä…¢·¥ás ·¥õ·¥è s·¥ã…™·¥ò.')
            return
        
        conv['skipno'] = int(message.text)
        await send_confirmation(bot, user_id, message)
        return
